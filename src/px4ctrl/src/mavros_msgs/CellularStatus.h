// Generated by gencpp from file mavros_msgs/CellularStatus.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_CELLULARSTATUS_H
#define MAVROS_MSGS_MESSAGE_CELLULARSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct CellularStatus_
{
  typedef CellularStatus_<ContainerAllocator> Type;

  CellularStatus_()
    : status(0)
    , failure_reason(0)
    , type(0)
    , quality(0)
    , mcc(0)
    , mnc(0)
    , lac(0)  {
    }
  CellularStatus_(const ContainerAllocator& _alloc)
    : status(0)
    , failure_reason(0)
    , type(0)
    , quality(0)
    , mcc(0)
    , mnc(0)
    , lac(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _failure_reason_type;
  _failure_reason_type failure_reason;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef uint16_t _mcc_type;
  _mcc_type mcc;

   typedef uint16_t _mnc_type;
  _mnc_type mnc;

   typedef uint16_t _lac_type;
  _lac_type lac;





  typedef boost::shared_ptr< ::mavros_msgs::CellularStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::CellularStatus_<ContainerAllocator> const> ConstPtr;

}; // struct CellularStatus_

typedef ::mavros_msgs::CellularStatus_<std::allocator<void> > CellularStatus;

typedef boost::shared_ptr< ::mavros_msgs::CellularStatus > CellularStatusPtr;
typedef boost::shared_ptr< ::mavros_msgs::CellularStatus const> CellularStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::CellularStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::CellularStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::CellularStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::CellularStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.failure_reason == rhs.failure_reason &&
    lhs.type == rhs.type &&
    lhs.quality == rhs.quality &&
    lhs.mcc == rhs.mcc &&
    lhs.mnc == rhs.mnc &&
    lhs.lac == rhs.lac;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::CellularStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::CellularStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::CellularStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::CellularStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::CellularStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::CellularStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::CellularStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::CellularStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::CellularStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a474bdb9df111b4e16fab4c29f7a6956";
  }

  static const char* value(const ::mavros_msgs::CellularStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa474bdb9df111b4eULL;
  static const uint64_t static_value2 = 0x16fab4c29f7a6956ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::CellularStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/CellularStatus";
  }

  static const char* value(const ::mavros_msgs::CellularStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::CellularStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Follows https://mavlink.io/en/messages/common.html#CELLULAR_STATUS specification\n"
"\n"
"uint8 status\n"
"uint8 failure_reason\n"
"uint8 type\n"
"uint8 quality\n"
"uint16 mcc\n"
"uint16 mnc\n"
"uint16 lac\n"
;
  }

  static const char* value(const ::mavros_msgs::CellularStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::CellularStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.failure_reason);
      stream.next(m.type);
      stream.next(m.quality);
      stream.next(m.mcc);
      stream.next(m.mnc);
      stream.next(m.lac);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CellularStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::CellularStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::CellularStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "failure_reason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failure_reason);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "mcc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mcc);
    s << indent << "mnc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mnc);
    s << indent << "lac: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lac);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_CELLULARSTATUS_H
